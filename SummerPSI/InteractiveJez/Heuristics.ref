*$INLINE HigherOrder;

$EXTERN RecSubst,RemDups,IsVariable,ITE;

$ENTRY CounterCheck {
 (e.Data)
 , e.Data : (AreEqual (e.LHS) (e.RHS)) e.OtherData
 , <Asymmetric (Var All) (e.LHS)(e.RHS)> :(e.LHS1)(e.RHS1)
 , e.LHS1 e.RHS1 :
    {  e.S (Var e.Any) e.S2 = (e.Data); /* We assume that existence of a variable prevents contradiction (very weak condition) */
       e.NoVars
     , <RemDups e.LHS1 e.RHS1> : e.LetterSet
     , <MapCall-Till (True) Revert (CheckContradiction (e.LHS1)(e.RHS1)) e.LetterSet> :
      { False = (e.Data Contradiction);
        True = (e.Data);
       }; 
     };
}

$ENTRY FailOnEmptiness {
 (e.Data)
 , e.Data :
 { (AreEqual (e.LHS) (e.RHS)) (e.Constraints) (e.Substs)
 , <RemDups <MapCall Revert (RetrieveProblemRestr (e.LHS)(e.RHS)(e.Constraints)) Start End Symmetric>> : e.NullVars
 , <NullifyBase e.NullVars (e.LHS)(e.RHS)(e.Constraints)> : 
 {/* EMPTY */ = (e.Data Contradiction);
   e.NewEqs
 , <MapCall-Till (True) Plain CheckTrivialConsistency e.NewEqs> :
 { True = (e.Data);
   False = (e.Data Contradiction);
 };
 }; 
   e.AlreadyContradiction = (e.Data);
  };
}

RetrieveProblemRestr {
 Start (t.X e.LHS)(t.Y e.RHS)(e.Constraints)
 , e.Constraints : 
 { e.Constr1 (OR (not t.Y starts t.X)) e.Constr2
  = t.X <RetrieveProblemRestr Start (e.LHS)(t.Y e.RHS)(e.Constraints)>;
   e.Constr1 (OR (not t.X starts t.Y)) e.Constr2
  = t.Y <RetrieveProblemRestr Start (t.X e.LHS)(e.RHS)(e.Constraints)>;
  e.NotContradictory = /* EMPTY SET */;
 };
 End (e.LHS t.X)(e.RHS t.Y)(e.Constraints)
 , e.Constraints : 
 { e.Constr1 (OR (not t.Y ends t.X)) e.Constr2
  = t.X <RetrieveProblemRestr End (e.LHS)(e.RHS t.Y)(e.Constraints)>;
   e.Constr1 (OR (not t.X ends t.Y)) e.Constr2
  = t.Y <RetrieveProblemRestr End (e.LHS t.X)(e.RHS)(e.Constraints)>;
  e.NotContradictory = /* EMPTY SET */;
 };
 Symmetric (t.X1 e.LHS1)(t.Y1 e.RHS1)(e.Constraints)
	, t.X1 e.LHS1 : e.LHS0 t.X2
	, t.Y1 e.RHS1 : e.RHS0 t.Y2
   , e.Constraints :  	/* Slightly weaker heuristics: no recursion in branching, in order to avoid backtracking */
    {   e.C1 (OR (not t.X1 starts t.Y1)(not t.X2 ends t.Y2))
		 = (OR (t.Y1 <RetrieveProblemRestr Start (t.X1 e.LHS1)(e.RHS1)(e.Constraints)>) 
			(t.Y2 <RetrieveProblemRestr End (t.X1 e.LHS1)(e.RHS0)(e.Constraints)>)); 
	e.C1 (OR (not t.Y1 starts t.X1)(not t.X2 ends t.Y2))
		 = (OR (t.X1 <RetrieveProblemRestr Start (e.LHS1)(t.Y1 e.RHS1)(e.Constraints)>) 
			(t.Y2 <RetrieveProblemRestr End (t.X1 e.LHS1)(e.RHS0)(e.Constraints)>)); 
	e.C1 (OR (not t.X1 starts t.Y1)(not t.Y2 ends t.X2))
		 = (OR (t.Y1 <RetrieveProblemRestr Start (t.X1 e.LHS1)(e.RHS1)(e.Constraints)>) 
		       (t.X2 <RetrieveProblemRestr End (e.LHS0)(e.RHS0 t.Y2)(e.Constraints)>)); 
	e.C1 (OR (not t.Y1 starts t.X1)(not t.Y2 ends t.X2))
		 = (OR (t.X1 <RetrieveProblemRestr Start (e.LHS1)(t.Y1 e.RHS1)(e.Constraints)>) 
			(t.X2 <RetrieveProblemRestr End (e.LHS0)(e.RHS0 t.Y2)(e.Constraints)>)); 
	e.NotContradictory = /* EMPTY SET */;
    };
  s.Mode e.Any (e.Constraints) = /* EMPTY SET */; /* In case some side of an equation is empty */
}

CheckContradiction {
  t.Letter (e.LHS)(e.RHS)
  , <Asymmetric t.Letter (e.LHS)(e.RHS)> : (e.LHS1)(e.RHS1)
  , <Prout t.Letter (e.LHS1)(e.RHS1)> : e.Trash
  , e.LHS1 e.RHS1 :
  { e.S t.Letter e.S2 = False; /* Given an unbalanced letter, it yields a contradiction */
    e.Any = True;
  }; 
}

SuppressCommonStrings {
 (t.X e.LHS)(t.X e.RHS) = <SuppressCommonStrings (e.LHS)(e.RHS)>;
 (e.LHS t.X)(e.RHS t.X) = <SuppressCommonStrings (e.LHS)(e.RHS)>;
 (e.LHS)(e.RHS) = (e.LHS)(e.RHS);
}

NullifyBase {
 e.Vars (OR (e.Var1) (e.Var2))(e.LHS)(e.RHS)(e.Constraints)
	 = <ITE <Nempty e.Vars e.Var1 (e.Constraints)> (/*EMPTY*/) (<Recursive-Map Revert (Nullify) (((e.LHS)(e.RHS))) e.Vars e.Var1>)>
	   <ITE <Nempty e.Vars e.Var1 (e.Constraints)> (/*EMPTY*/) (<Recursive-Map Revert (Nullify) (((e.LHS)(e.RHS))) e.Vars e.Var2>)>;
 e.Vars (e.LHS)(e.RHS)(e.Constraints)
	 = <ITE <Nempty e.Vars (e.Constraints)> (/*EMPTY*/) (<Recursive-Map Revert (Nullify) (((e.LHS)(e.RHS))) e.Vars>)>;
}

Nempty {
 e.V1 t.Var e.V2 (e.C1 (OR (not empty t.Var)) e.C2) = True;
 e.Z = False;
}

Nullify {
 t.Var ((e.X t.Var e.X2)(e.Y)) = <Nullify t.Var ((e.X e.X2)(e.Y))>;
 t.Var ((e.Y)(e.X t.Var e.X2)) = <Nullify t.Var ((e.Y)(e.X e.X2))>;
 t.Var (e.Eq) = (e.Eq);

}

/* Subtracts equal terms of the given sort from both sides of equation */
Asymmetric {
 (t.term All) (e.L1 (t.term e.AnyName) e.L2)(e.R1 (t.term e.AnyName) e.R2)
   = <Asymmetric (t.term All) (e.L1 e.L2)(e.R1 e.R2)>;
 t.term (e.L1 t.term e.L2) (e.R1 t.term e.R2) = <Asymmetric t.term (e.L1 e.L2)(e.R1 e.R2)>;
 t.ToSubtract (e.LeftSet)(e.RightSet) = (e.LeftSet)(e.RightSet);
}

CheckTrivialConsistency {
 ((e.LHS)(e.RHS)) 
	= <CheckTrivialConsistencyAux 
		<SuppressCommonStrings (e.LHS)(e.RHS)>
	  >;
}

/* Checks whether the two parts of the equation do not start with distinct constants */
CheckTrivialConsistencyAux {
 (e.L0)(e.R0)
 , e.L0 : 
 {t.X e.L
 , e.R0 : 
 {t.Y e.R 
 , <MapCall-Till (False) Plain IsVariable t.X t.Y> :
 { False = False;
   True  
 , e.L0 : e.L2 t.X1
 , e.R0 : e.R2 t.Y1
   = <MapCall-Till (False) Plain IsVariable t.X1 t.Y1>; 
 };
 /* EMPTY */
  = <MapCall-Till (True) Plain IsVariable e.L0>;
 };
 /* EMPTY */
  = <MapCall-Till (True) Plain IsVariable e.R0>;
 };
}

