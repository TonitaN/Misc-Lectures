
$ENTRY SMTCodegen {
  s.Mode (e.Alphabet)(e.VarList)(e.Model)
   = <GetLogic s.Mode>
     <Putout 1>
                         <SMTFunDecl s.Mode (e.Alphabet) e.VarList>
			 <Putout 1>
                         <SMTModelDecl s.Mode (e.Alphabet) (e.Model)>
			 <Putout 1>
                         <Putout 1 '(check-sat)'>;
}

GetLogic {
 LIA = <Putout 1 '(set-logic QF_LIA)'>;
 STR = <Putout 1 '(set-logic QF_SLIA)'>
   <Putout 1 '(set-option :strings-exp true)'>;
}

Superstring {
  (e.x) e.1 e.x e.2 = True;
  (e.x) e.y = False;
}

SMTFunDecl {
   s.Mode (e.Alphabet) = ;
   STR (e.Alphabet) (Var e.Name) e.Rest = <Putout 1 '(declare-fun 'e.Name' () String)'><SMTFunDecl STR (e.Alphabet) e.Rest>;
   LIA (e.Alphabet) (Var e.Name) e.Rest = <NameMapping (e.Alphabet) (Var e.Name)><SMTFunDecl LIA (e.Alphabet) e.Rest>;
}

NameMapping {
 ((s.Char s.Numb) e.Rest) (Var e.Name)
 , e.Name s.Char <Numb s.Numb> : e.FullName = <Putout 1 '(declare-fun 'e.FullName' () Int)'><Putout 1 '(assert (>= 'e.FullName' 0))'>
   <NameMapping (e.Rest) (Var e.Name)>;
 () t.Var = ;
}

SMTModelDecl {
 STR (e.Alphabet) t.Equation = <SMTOneModelDecl STR t.Equation>;
 LIA (e.Alphabet) t.Equation = <SMTModelDecl_Proj (e.Alphabet) t.Equation>;
}

SMTOneModelDecl {
 STR (AreEqual (e.LHS)(e.RHS)) = <Putout 1'(assert (= (str.++ ' <SMTExpr STR e.LHS>')\n''  (str.++ '<SMTExpr STR e.RHS>')))'>;
 LIA (AreEqual (e.LHS)(e.RHS)) = <Putout 1'(assert (= (+ ' <SMTExpr LIA e.LHS>')\n''  (+ '<SMTExpr LIA e.RHS>')))'>; 
}

SMTModelDecl_Proj {
  () t.Equation = ;
  (t.Letter e.Alphabet) t.Equation
   , t.Equation : (AreEqual (e.LHS)(e.RHS)) = <SMTOneModelDecl LIA (AreEqual (<ClearConsts t.Letter e.LHS>)(<ClearConsts t.Letter e.RHS>))>
					<SMTModelDecl_Proj (e.Alphabet)t.Equation>;
}

ClearConsts {
  (s.Letter s.Num) (Var e.Var) e.List = (Var e.Var s.Letter <Symb s.Num>) <ClearConsts (s.Letter s.Num) e.List>;
  t.Term t.Term e.List = t.Term <ClearConsts t.Term e.List>;
  t.Term t.Term2 e.List = <ClearConsts t.Term e.List>;
  t.Term = ;
}

MorphSMT {
  STR (s.Sym 0) = '\"'s.Sym'\"';
  STR (s.Sym 1) = '\"#\"';
  LIA t.Sym = '1';
}

SMTExpr {
  s.Mode = ;
  s.Mode (Var s.Name) = s.Name;
  s.Mode (e.String) = <MorphSMT s.Mode (e.String)>;
  s.Mode (Var e.Name) e.Rest = e.Name' '<SMTExpr s.Mode e.Rest>;
  s.Mode (e.String) e.Rest = <MorphSMT s.Mode (e.String)>' '<SMTExpr s.Mode e.Rest>;  
}
