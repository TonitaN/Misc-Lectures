/* Given a sequence of (possibly curried) functions f1 ... fn, and an arg a, returns <fn...<f2 <f1 a>>..> */
MapCompose {
  ((e.Call) e.RestCalls) e.Arg = <MapCompose (e.RestCalls) <Mu e.Call e.Arg>>;
  (/* EMPTY */) e.Arg = e.Arg;
}

/* Given an arg and a (possibly curried) function, applies the function to the arg: \x f_A -> <f A x> */
Flip {
   e.FreeArg (s.Fun e.CurriedArg) = <Mu s.Fun e.CurriedArg e.FreeArg>; /* Function with curried arguments */
   e.FreeArg s.Fun = <Mu s.Fun e.FreeArg>; /* Not curried, plain function */
}

/* \f_A xs -> map f_A xs */
MapCall {

   Curry (s.FunctionName e.Args) t.Element e.List /* Some first args are curried */
       = <Mu s.FunctionName e.Args t.Element> <MapCall Curry (s.FunctionName e.Args) e.List>;
   Revert (s.FunctionName e.Args) t.Element e.List /* Some last args are "curried" (impossible in Haskell-style langs w/o associativity) */
       = <Mu s.FunctionName t.Element e.Args> <MapCall Revert (s.FunctionName e.Args) e.List>;
   Plain s.FunctionName t.Element e.List /* A bare function is applied, no curried arguments are given */
       = <Mu s.FunctionName t.Element> <MapCall Plain s.FunctionName e.List>;
   s.AnyMode t.ToApply /* No args */ = /* Empty list */;
}

/* Given a set of pairs (f1 x1) ... (fn xn), where fi is the function identifier, "unfreezes" fi: <f1 x1> ... <fn xn> */
UnwrapCalls {
 (s.FunctionName e.Data) e.MuList
  = <Mu s.FunctionName e.Data> <UnwrapCalls e.MuList>;
 ((s.FunctionName e.Curried) e.Data) e.MuList
  = <Mu s.FunctionName e.Curried e.Data> <UnwrapCalls e.MuList>;
 /* No more pairs */ = /* EMPTY */;
}

