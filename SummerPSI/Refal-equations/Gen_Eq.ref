$ENTRY Go {
  = <Open 'w' 1 'Check_Eq.ref'>
    <GenProg <Get 0>>
    <GenEntry <Get 0>>
    <Close 1>;
}

GenEntry {
  e.str =
    <Putout 1 '$ENTRY Go {'>
    <Putout 1 '\t= <Check (\'' e.str '\')(\'' e.str '\')>;'>
    <Putout 1 '}\n'>;
}

GenProg {
  e.u1 '=' e.u2 =
    <Putout 1 'Check {'>
    <Putout 1 '\t(' <GenLHS e.u1> ')(' <GenLHS e.u2> ') = '
              '<Prout ' <Vars e.u1 e.u2> '>;'>
    <Putout 1 '\t(e.u1)(e.u2) = <Prout \'No match\'>;'>
    <Putout 1 '}\n'>;
}

* TODO: combine consecutive constansts into a continious string
GenLHS {
  s.x e.u, <VarNames>: e.n1 s.x e.n2 = 'e.' s.x ' ' <GenLHS e.u>;
  s.x e.u = '\'' s.x '\' ' <GenLHS e.u>;
  = ;
}

Vars {
  e.u1 s.x e.u2 s.x e.u3 = <Vars e.u1 s.x e.u2 e.u3>;
  s.x e.u, <VarNames>: e.n1 s.x e.n2 =
    '\'' s.x ' = \' e.' s.x ' \'\\n\'' <Vars e.u>; 
  s.x e.u = <Vars e.u>;
  = ;
}

VarNames {
  = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
}

