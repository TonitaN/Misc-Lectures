$ENTRY Go {
  = <Open 'w' 1 'Check_Eq.ref'>
    <GenProg <RemoveSpaces <Get 0>>>
    <GenEntry <RemoveSpaces <Get 0>>>
    <Close 1>;
}

RemoveSpaces {
  e.u1 ' ' e.u2 = <RemoveSpaces e.u1 e.u2>;
  e.u = e.u;
}

GenProg {
  e.u1 '=' e.u2
  , <IsEmpty e.u1> : False
  , <IsEmpty e.u2> : False
  , <IsInAlphabet e.u1 e.u2> : True =
    <Putout 1 'Check {'>
    <Putout 1 '\t(' <GenLHS e.u1 Main> ')(' <GenLHS e.u2 Main> ') = '
              '<Prout ' <VerbalizeVars e.u1 e.u2> '>;'>
    <Putout 1 '\t(e.u1)(e.u2) = <Prout \'No match\'>;'>
    <Putout 1 '}\n'>;
  e.u = 
    <Putout 1 'Check {'>
    <Putout 1 '\t(e.u1)(e.u2) = <Prout \'Invalid equation\'>;'>
    <Putout 1 '}\n'>;
}

IsEmpty {
  = True;
  e.u = False;
}

IsInAlphabet {
  s.x e.u, <Vars> <Consts> : e.u1 s.x e.u2 = <IsInAlphabet e.u>;
  = True;
  e.u = False;
}

GenLHS {
  s.x e.u Main, <Vars>: e.u1 s.x e.u2 = 'e.' s.x ' ' <GenLHS e.u Main>;
  s.x e.u String, <Vars>: e.u1 s.x e.u2 = '\' e.' s.x ' ' <GenLHS e.u Main>;
  s.x e.u Main = '\'' s.x <GenLHS e.u String>;
  s.x e.u String = s.x <GenLHS e.u String>;
  Main = ;
  String = '\'';
}

VerbalizeVars {
  e.u1 s.x e.u2 s.x e.u3 = <VerbalizeVars e.u1 s.x e.u2 e.u3>;
  s.x e.u, <Vars>: e.u1 s.x e.u2 = 
    '\'' s.x ' = \' e.' s.x ' \'\\n\' ' <VerbalizeVars e.u>; 
  s.x e.u = <VerbalizeVars e.u>;
  = ;
}

GenEntry {
  e.u, <IsInAlphabet e.u> : True =
    <Putout 1 '$ENTRY Go {'>
    <Putout 1 '\t= <Check (\'' e.u '\')(\'' e.u '\')>;'>
    <Putout 1 '}\n'>;
  e.u = 
    <Putout 1 '$ENTRY Go {'>
    <Putout 1 '\t= <Prout \'Invalid string\'>;'>
    <Putout 1 '}\n'>;
}

Vars {
  = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
}

Consts {
  = 'abcdefghijklmnopqrstuvwxyz';
}

